plugins {
    id 'io.spring.dependency-management' version '1.1.3'
    id 'java-library'
    id 'jacoco'
    id 'idea'
    id 'maven-publish'
    id 'signing'
}

java {
    sourceCompatibility = '17'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:3.4.0"
    }
}

repositories {
    mavenCentral()
}

tasks.named('test') {
    useJUnitPlatform()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-json'
    implementation 'org.springframework:spring-webflux'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework:spring-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.11.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.assertj:assertj-core:3.25.3'
    testImplementation 'org.skyscreamer:jsonassert:1.5.3'

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
}

jar {
    enabled = true
    archiveClassifier = ''
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = true
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += '-parameters'
}


tasks.register('sourcesJar', Jar) {
    dependsOn classes
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact tasks.sourcesJar
            artifact tasks.javadocJar

            groupId = project.group
            artifactId = project.name
            version = project.version

            pom {
                name = project.name
                description = 'Lightweight HATEOAS library designed for Spring Webflux.'
                url = 'https://hateoflux.kamillionlabs.de'

                licenses {
                    license {
                        name = 'Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        id = 'younes'
                        name = 'Younes El Ouarti'
                        email = 'younes@kamillionlabs.de'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/kamillionlabs/hateoflux.git'
                    developerConnection = 'scm:git:ssh://git@github.com/kamillionlabs/hateoflux.git'
                    url = 'https://github.com/kamillionlabs/hateoflux/'
                }
            }
        }
    }

    repositories {
        mavenLocal()
    }
}

signing {
    def signingKey = System.getenv('SIGNING_KEY')
    def signingKeyId = System.getenv('SIGNING_KEY_ID')
    def signingPassword = System.getenv('SIGNING_PASSWORD')

    if (signingKey?.trim()) {
        println 'Using in-memory PGP keys for signing.'
        useInMemoryPgpKeys(signingKey, signingPassword)
    } else {
        println 'Using GPG command-line tool for signing.'
        useGpgCmd()
        ext['signing.keyId'] = signingKeyId
        ext['signing.password'] = signingPassword
        ext['signing.gnupg.options'] = ['--batch', '--yes', '--pinentry-mode', 'loopback']
    }
    sign publishing.publications.mavenJava
}


// Task to generate checksums for artifacts and their signatures
tasks.register('generateChecksums') {
    dependsOn 'jar', 'sourcesJar', 'javadocJar', 'signMavenJavaPublication', 'generatePomFileForMavenJavaPublication'

    doLast {
        def artifacts = []

        def jarFile = tasks.named('jar').get().archiveFile.get().asFile
        artifacts << jarFile

        def sourcesJarFile = tasks.named('sourcesJar').get().archiveFile.get().asFile
        artifacts << sourcesJarFile

        def javadocJarFile = tasks.named('javadocJar').get().archiveFile.get().asFile
        artifacts << javadocJarFile

        // POM file
        def pomFile = file("$buildDir/publications/mavenJava/pom-default.xml")
        artifacts << pomFile

        // Collect signature files separately
        def signatureFiles = artifacts.collect { artifactFile ->
            def signatureFile = new File("${artifactFile.path}.asc")
            signatureFile.exists() ? signatureFile : null
        }.findAll { it != null }

        // Combine artifacts and signature files
        def allFiles = artifacts + signatureFiles

        // Generate MD5 and SHA1 checksums using 'todir' and 'fileext'
        allFiles.each { artifactFile ->
            ant.checksum(file: artifactFile, algorithm: 'MD5', todir: artifactFile.parentFile, fileext: '.md5')
            ant.checksum(file: artifactFile, algorithm: 'SHA1', todir: artifactFile.parentFile, fileext: '.sha1')
        }
    }
}


tasks.register('assembleBundle', Zip) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    dependsOn 'jar', 'sourcesJar', 'javadocJar', 'signMavenJavaPublication', 'generateChecksums', 'generatePomFileForMavenJavaPublication'

    archiveFileName.set("${project.name}-${project.version}-bundle.zip")
    destinationDirectory.set(file("$buildDir/distributions"))

    def groupPath = project.group.replace('.', '/')
    def artifactId = project.name
    def version = project.version

    def baseDir = "${groupPath}/${artifactId}/${version}"

    def jarTask = tasks.named('jar').get()
    def sourcesJarTask = tasks.named('sourcesJar').get()
    def javadocJarTask = tasks.named('javadocJar').get()

    // Define artifacts with explicit extensions
    def artifacts = [
            [file: jarTask.archiveFile.get().asFile, classifier: null, extension: 'jar'],
            [file: sourcesJarTask.archiveFile.get().asFile, classifier: 'sources', extension: 'jar'],
            [file: javadocJarTask.archiveFile.get().asFile, classifier: 'javadoc', extension: 'jar'],
            [file: file("$buildDir/publications/mavenJava/pom-default.xml"), classifier: null, extension: 'pom']
    ]

    artifacts.each { artifact ->
        def artifactFile = artifact.file
        def classifier = artifact.classifier ? "-${artifact.classifier}" : ''
        def artifactName = "${artifactId}-${version}${classifier}.${artifact.extension}"

        def filesToInclude = []

        // Original artifact file
        if (artifactFile.exists()) {
            filesToInclude << [source: artifactFile, destination: artifactName]
        }

        // Signature and checksum files
        ['asc', 'md5', 'sha1'].each { ext ->
            def additionalFile = new File("${artifactFile.path}.${ext}")
            if (additionalFile.exists()) {
                filesToInclude << [source: additionalFile, destination: "${artifactName}.${ext}"]
            }
        }

        // Include files into the ZIP
        filesToInclude.each { fileInfo ->
            from(fileInfo.source) {
                into(baseDir)
                rename { fileInfo.destination }
            }
        }
    }
}
